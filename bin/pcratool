#!/usr/bin/python3
SVER = '0.0.3-dev'

##############################################################################
# pcratool - Pacemaker Cluster Report Analysis Tool
# Copyright (c) 2025 SUSE LLC
#
# Description:  Analyzes HB report archives for known issues
# Modified:     2025 Aug 19
#
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  Authors/Contributors:
#    Jason Record <jason.record@suse.com>
#
##############################################################################

import pprint

import os
import re
import sys
import json
import signal
import shutil
import datetime
import socket
import getopt
import smtplib
import subprocess
import configparser
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

config_file = '/etc/pcratool/pcratool.conf'
width = 0
description_width = 0
progress_bar_active = True

def separator_line(use_char = '#'):
    print("{}".format(use_char*width))

def title():
    separator_line()
    print("#   Pacemaker Cluster Report Analysis Tool, v" + SVER)
    separator_line()
    print()

def usage():
    display = "  {:33} {}"
    print("Usage: pcratool [OPTIONS] [/path/to/hb_report]")
    print()
    print("OPTIONS")
    print(display.format('-h, --help', "Displays this screen"))
    print(display.format('-b, --batch', "Batch mode that disables the progress bar"))
    print(display.format('-d, --debug', "Use log level 4"))
    print(display.format('-k, --keep', "Do not delete extracted directories"))
    print(display.format('-n, --normal', "Use log level 2, default log level: Minimal"))
    print(display.format('-o <path>, --output <path>', "Report file output directory"))
    print(display.format('-q, --quiet', "Use log level 0"))
    print(display.format('-r, --remove', "Remove archive files leaving only the SCA Report file. Ignored in debug mode."))
    print(display.format('-t, --type', "SCA Report file output type, options: json, html, all. Default: html"))
    print(display.format('-v, --verbose', "Use log level 3"))
    print(display.format('-x <path>, --dirpath_extract_here <path>', "Extract any supportconfig archives to this alternate extraction directory"))
#    print(display.format('-l <level>, --log_level <level>', "Set log level, default: Minimal"))
#    print(display.format('', "0 Quiet, 1 Minimal, 2 Normal, 3 Verbose, 4 Debug"))
    print()

def option_error(msg):
    print(msg)
    print()
    usage()
    sys.exit(1)

def signal_handler(sig, frame):
    print("\n\nAborting...\n")
    sys.exit(1)

def separate_entry(msg, count):
    if count > 1:
        msg.min()
        msg.separator(msg.LOG_MIN, '=')
        msg.min()

def config_entry(_entry, trailer = ''):
    formatted_entry = _entry.strip('\"\'')
    if( len(trailer) > 0 ):
        if len(formatted_entry) > 0:
            if not formatted_entry.endswith(trailer):
                formatted_entry = formatted_entry + str(trailer)
    return formatted_entry

class ProgressBar():
    """Initialize and update progress bar class"""

    def __init__(self, prefix, total):
        self.base_len = int(width)
        self.desc_width = int(description_width) + 1
        self.bar_width = self.base_len
        self.prefix = prefix
        self.prefix_size = len(self.prefix)
        self.total = int(total)
        self.count = 0
        self.out = sys.stdout
        if self.prefix_size > self.desc_width:
            self.bar_width = self.base_len - self.prefix_size - 2
        else:
            self.bar_width = self.base_len - self.desc_width - 2
        self.display = "{:" + str(self.desc_width) + "s}[{}{}] {:3g}% {:3g}/{}"

    def __str__(self):
        return 'class %s(\n  prefix=%r \n  bar_width=%r \n  total=%r\n)' % (self.__class__.__name__, self.prefix, self.bar_width, self.total)

    def set_prefix(self, _prefix):
        self.prefix = _prefix
        if ( self.bar_width_orig == self.base_len ):
            self.bar_width = self.base_len - self.prefix_size - 2
        else:
            self.bar_width = self.bar_width_orig

    def set_total(self, _new_total):
        self.total = _new_total

    def inc_count(self, increment = 1):
        """Increments one by default"""
        if self.count < self.total:
            self.count += increment

    def get_total(self):
        return self.total

    def get_count(self):
        return self.count

    def update(self):
        percent_complete = int(100*self.count/self.total)
        current_progress = int(self.bar_width*self.count/self.total)
        print(self.display.format(self.prefix, "#"*current_progress, "."*(self.bar_width-current_progress), percent_complete, self.count, self.total), end='\r', file=self.out, flush=True)

    def finish(self):
        if self.count != self.total:
            self.count = self.total
            self.update()
        print("", flush=True, file=self.out)

class DisplayMessages():
    "Display message string for a given log level"
    LOG_QUIET = 0    # turns off messages
    LOG_MIN = 1    # minimal messages
    LOG_NORMAL = 2    # normal, but significant, messages
    LOG_VERBOSE = 3    # detailed messages
    LOG_DEBUG = 4    # debug-level messages
    LOG_LEVELS = {0: "Quiet", 1: "Minimal", 2: "Normal", 3: "Verbose", 4: "Debug" }

    def __init__(self):
        self.level = self.LOG_MIN # instance default
        self.desc_width = 30 # instance default
        self.msg_display = "{:" + str(self.desc_width) + "}"
        self.msg_display_pair = self.msg_display + " = {}"

    def __str__ (self):
        return "class %s(level=%r)" % (self.__class__.__name__,self.level)

    def set_width(self, width_value):
        self.desc_width = width_value
        self.msg_display = "{:" + str(self.desc_width) + "}"
        self.msg_display_pair = self.msg_display + " = {}"

    def get_level(self):
        return self.level

    def get_level_str(self):
        return self.LOG_LEVELS[self.level]

    def set_level(self, level):
        if( level >= self.LOG_DEBUG ):
            self.level = self.LOG_DEBUG
        else:
            self.level = level

    def validate_level(self, level):
        validated_level = -1
        if( level.isdigit() ):
            validated_level = int(level)
        else:
            argstr = level.lower()
            if( argstr.startswith("qui") ):
                validated_level = self.LOG_QUIET
            elif( argstr.startswith("min") ):
                validated_level = self.LOG_MIN
            elif( argstr.startswith("norm") ):
                validated_level = self.LOG_NORMAL
            elif( argstr.startswith("verb") ):
                validated_level = self.LOG_VERBOSE
            elif( argstr.startswith("debug") ):
                validated_level = self.LOG_DEBUG

        return validated_level


    def __write_paired_msg(self, level, msgtag, msgstr):
        if( level <= self.level ):
            print(self.msg_display_pair.format(msgtag, msgstr))

    def __write_msg(self, level, msgtag):
        if( level <= self.level ):
            print(self.msg_display.format(msgtag))

    def quiet(self, msgtag = None, msgstr = None):
        "Write messages even if quiet is set"
        if msgtag:
            if msgstr:
                self.__write_paired_msg(self.LOG_QUIET, msgtag, msgstr)
            else:
                self.__write_msg(self.LOG_QUIET, msgtag)
        else:
            if( self.level >= self.LOG_QUIET ):
                print()

    def min(self, msgtag = None, msgstr = None):
        "Write the minium amount of messages"
        if msgtag:
            if msgstr:
                self.__write_paired_msg(self.LOG_MIN, msgtag, msgstr)
            else:
                self.__write_msg(self.LOG_MIN, msgtag)
        else:
            if( self.level >= self.LOG_MIN ):
                print()

    def normal(self, msgtag = None, msgstr = None):
        "Write normal, but significant, messages"
        if msgtag:
            if msgstr:
                self.__write_paired_msg(self.LOG_NORMAL, msgtag, msgstr)
            else:
                self.__write_msg(self.LOG_NORMAL, msgtag)
        else:
            if( self.level >= self.LOG_NORMAL ):
                print()

    def verbose(self, msgtag = None, msgstr = None):
        "Write more verbose informational messages"
        if msgtag:
            if msgstr:
                self.__write_paired_msg(self.LOG_VERBOSE, msgtag, msgstr)
            else:
                self.__write_msg(self.LOG_VERBOSE, msgtag)
        else:
            if( self.level >= self.LOG_VERBOSE ):
                print()

    def debug(self, msgtag = None, msgstr = None):
        "Write all messages, including debug level"
        if msgtag:
            updated_msgtag = "+ " + msgtag
            if msgstr:
                self.__write_paired_msg(self.LOG_DEBUG, updated_msgtag, msgstr)
            else:
                self.__write_msg(self.LOG_DEBUG, updated_msgtag)
        else:
            if( self.level >= self.LOG_DEBUG ):
                print()

    def separator(self, required_level, use_char = '#'):
        if self.level >= required_level:
            print("{}".format(use_char*width))

def valid_supportconfig_dir(msg, given_path):
    TEST_FILES = ['description.txt', 'ha-log.txt']
    if not os.access(given_path, os.R_OK | os.X_OK):
        msg.min(" Error", "Directory permission denied: {0}".format(given_path))
        msg.min(" * Suggestion", "Try sudo scatool {0}".format(given_path))
        return False
    else:
        for test_file in TEST_FILES:
            file_path = given_path + '/' + test_file
            if not os.access(file_path, os.F_OK):
                msg.min(" Error", "Invalid supportconfig directory: {0}".format(given_path))
                msg.verbose(" * Missing", "{0}".format(file_path))
                return False
            elif not os.access(file_path, os.R_OK):
                msg.min(" Error", "Read file permission denied: {0}".format(file_path))
                msg.min(" * Suggestion", "Try sudo scatool {0}".format(given_path))
                return False
    return True

def extract_supportconfig(msg, tarball):
    path_in_tarball = ''
    archfile = tarball['path'] 
    archdir = tarball['dirpath_extract_here']
    msg.verbose(" Extracting File", archfile)
    msg.debug("archdir", archdir)
    cmd = "tar -xvf "  + archfile + " -C " + archdir
    msg.debug('Process Command', cmd)
    process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    stdout, stderr = process.communicate()
    outfile = stdout.splitlines()[0]
    msg.debug("outfile", outfile)
    rc = process.returncode
    if( rc > 0 ):
        print(" Error: Cannot extract tar file", file=sys.stderr)
        print(stderr, file=sys.stderr)
        print(file=sys.stderr)
        sys.exit(7)
    else:
        path_in_tarball = archdir + '/' + os.path.dirname(outfile).split("/")[0]
        msg.verbose(' Embedded Directory', path_in_tarball)

    return path_in_tarball

def i_am_root():
    if not os.environ.get("SUDO_UID") and os.geteuid() != 0:
        return False
    return True

def clean_up(msg, data):
    if data['source_data']['valid']:
        if data['source_data']['remove_directory']:
            try:
                shutil.rmtree(data['source_data']['dirpath_data_source'])
            except:
                True

        if data['source_data']['remove_tarball']:
            try:
                os.remove(data['source_data']['path'])
            except:
                True

def evaluate_given_path(msg, given_path):
    given_results = {
        'exists': False, 
        'given_path': given_path, 
        'path': '', 
        'head': '', 
        'tail': '', 
        'type': '', 
        'tail_mime_type': '',
        'head_read': False, 'head_write': False, 'head_exec': False, 
        'tail_read': False, 'tail_write': False, 'tail_exec': False, 
    }

    if os.path.exists(given_path):
        given_results['exists'] = True
        given_results['path'] = os.path.abspath(given_path)
        given_results['head'] = os.path.dirname(given_results['path'])
        given_results['tail'] = os.path.basename(given_results['path'])
        if os.access(given_results['path'], os.R_OK):
            given_results['tail_read'] = True
        if os.access(given_results['path'], os.W_OK):
            given_results['tail_write'] = True
        if os.access(given_results['path'], os.X_OK):
            given_results['tail_exec'] = True
        if given_results['tail_read']:
            if os.path.isfile(given_results['path']):
                given_results['type'] = 'file'
                cmd = "file --brief --mime-type " + given_path
                msg.debug('Process Command', cmd)
                process = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
                stdout, stderr = process.communicate()
                given_results['tail_mime_type'] = stdout.strip()
            elif os.path.isdir(given_results['path']):
                given_results['type'] = 'dir'
                given_results['tail_mime_type'] = 'inode/directory'
        if os.access(given_results['head'], os.R_OK):
            given_results['head_read'] = True
        if os.access(given_results['head'], os.W_OK):
            given_results['head_write'] = True
        if os.access(given_results['head'], os.X_OK):
            given_results['head_exec'] = True

    msg.debug("Evaluate Path", given_results)
    return given_results

def check_extraction_path_given(msg, config_file, extract_path_cmd, extract_path_config):
    path_data = {}

    if extract_path_cmd:
        path_data = evaluate_given_path(msg, extract_path_cmd)
        msg.verbose("Extraction Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
        if path_data['exists']:
            if path_data['tail_write']:
                path_data['dirpath_extract_here'] = path_data['path']
                path_data['extract_here_for_reports'] = True
                msg.normal("Extraction Directory Change", "From command line: {0}".format(path_data['path']))
            else:
                msg.min("Extraction Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
                msg.min(" Error", "Write permisson denied, cannot extract file to {0}".format(path_data['path']))
                msg.min(" * Suggestion", "Fix the -x, --dirpath_extract_here directory\n")
                sys.exit(2)
        else:
            msg.min("Extraction Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
            msg.min(" Error", "Directory not found - {0}".format(path_data['given_path']))
            msg.min(" * Suggestion", "Try mkdir -p {0} or fix the -x, --dirpath_extract_here directory\n".format(path_data['given_path']))
            sys.exit(2)
    elif extract_path_config:
        path_data = evaluate_given_path(msg, extract_path_config)
        msg.verbose("Extraction Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
        if path_data['exists']:
            if path_data['tail_write']:
                path_data['dirpath_extract_here'] = path_data['path']
                path_data['extract_here_for_reports'] = True
                msg.normal("Extraction Directory Change", "From config file: {0}".format(path_data['path']))
            else:
                msg.min("Extraction Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
                msg.min(" Error", "Write permisson denied, cannot extract file to {0}".format(path_data['path']))
                msg.min(" * Suggestion", "Fix the extract_path in {0}\n".format(config_file))
                sys.exit(2)
        else:
            msg.min("Extraction Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
            msg.min(" Error", "Directory not found - {0}".format(path_data['given_path']))
            msg.min(" * Suggestion", "Try mkdir -p {0} or fix the extract_path in {1}\n".format(path_data['given_path'], config_file))
            sys.exit(2)

    return path_data

def check_report_path_given(msg, config_file, report_path_cmd, report_path_config):
    path_data = {}

    if report_path_cmd:
        path_data = evaluate_given_path(msg, report_path_cmd)
        msg.verbose("SCA Report Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
        if path_data['exists']:
            if path_data['tail_write']:
                msg.normal("SCA Report Directory Change", "From command line: {0}".format(path_data['path']))
            else:
                msg.min("SCA Report Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
                msg.min(" Error", "Write permisson denied, cannot create report file in {0}".format(path_data['path']))
                msg.min(" * Suggestion", "Fix the -o, --output directory\n")
                sys.exit(3)
        else:
            msg.min("SCA Report Directory", "Evaluating path given on command line: {0}".format(path_data['given_path']))
            msg.min(" Error", "Directory not found - {0}".format(path_data['given_path']))
            msg.min(" * Suggestion", "Try mkdir -p {0} or fix the -o, --output directory\n".format(path_data['given_path']))
            sys.exit(3)
    elif report_path_config:
        path_data = evaluate_given_path(msg, report_path_config)
        msg.verbose("SCA Report Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
        if path_data['exists']:
            if path_data['tail_write']:
                msg.normal("SCA Report Directory Change", "From config file: {0}".format(path_data['path']))
            else:
                msg.min("SCA Report Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
                msg.min(" Error", "Write permisson denied, cannot create report file in {0}".format(path_data['path']))
                msg.min(" * Suggestion", "Fix the report_output_path in {0}\n".format(config_file))
                sys.exit(3)
        else:
            msg.min("SCA Report Directory", "Evaluating path given in the config file: {0}".format(path_data['given_path']))
            msg.min(" Error", "Directory not found - {0}".format(path_data['given_path']))
            msg.min(" * Suggestion", "Try mkdir -p {0} or fix the report_output_path in {1}\n".format(path_data['given_path'], config_file))
            sys.exit(3)

    return path_data

def get_cluster_data(msg, file_data):
    cluster_data = {
        'nodes': {},
        'stonith': {
            'sbd': {
                'found': False,
                'config': {},
            },
        },
        'cnt_nodes_configured': -1,
        'cnt_nodes_included': 0,
        'cnt_resources_configured': -1,
        'has_quorum': False,
        'nodes_online': [],
        'nodes_offline': [],
        'nodes_maintenance': [],
        'permissions_valid_all_nodes': 1,
   }

    ##### description.txt
    filename = "description.txt"
    msg.debug("File", filename)
    filepath = file_data['dirpath_data_source'] + "/" + filename
    try:
        with open(filepath) as f:
            filedata = f.read().splitlines()
            f.close()
    except Exception as e:
        msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
        msg.verbose()
        filedata = ''

    if filedata:
        for line in filedata:
            if line.startswith("Date: "):
                cluster_data['hb_report_date'] = line.split(' ', 1)[1]
                msg.debug("> hb_report_data")
            if line.startswith("By: "):
                cluster_data['hb_report_by'] = line.split(' ', 1)[1]
                msg.debug("> hb_report_by")

    ##### analysis.txt
    filename = "analysis.txt"
    msg.debug("File", filename)
    filepath = file_data['dirpath_data_source'] + "/" + filename
    try:
        with open(filepath) as f:
            filedata = f.read().splitlines()
            f.close()
    except Exception as e:
        msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
        msg.verbose()
        filedata = ''

    if filedata:
        for line in filedata:
            if "Diff members.txt" in line:
                msg.debug("> insync_members_txt")
                if "OK" in line:
                    cluster_data['insync_members_txt'] = True
                else:
                    cluster_data['insync_members_txt'] = False

            if "Diff crm_mon.txt" in line:
                msg.debug("> insync_crm_mon_txt")
                if "OK" in line:
                    cluster_data['insync_crm_mon_txt'] = True
                else:
                    cluster_data['insync_crm_mon_txt'] = False

            if "Diff corosync.conf" in line:
                msg.debug("> insync_corosync_conf")
                if "OK" in line:
                    cluster_data['insync_corosync_conf'] = True
                else:
                    cluster_data['insync_corosync_conf'] = False

            if "Diff sysinfo.txt" in line:
                msg.debug("> insync_sysinfo_txt")
                if "OK" in line:
                    cluster_data['insync_sysinfo_txt'] = True
                else:
                    cluster_data['insync_sysinfo_txt'] = False

            if "Diff cib.xml" in line:
                msg.debug("> insync_cib_xml")
                if "OK" in line:
                    cluster_data['insync_cib_xml'] = True
                else:
                    cluster_data['insync_cib_xml'] = False

    subfolders = [ f.path for f in os.scandir(file_data['dirpath_data_source']) if f.is_dir() ]
    for node_data_source in subfolders:
        msg.verbose("Processing cluster info", node_data_source)
        node_name = os.path.basename(node_data_source)
        if node_name not in cluster_data['nodes']:
            cluster_data['nodes'][node_name] = {}
        cluster_data['cnt_nodes_included'] += 1
        msg.debug("incremented cnt_nodes_included")

        ##### permissions.txt
        filename = "permissions.txt"
        msg.debug("File", filename)
        filepath = node_data_source + "/" + filename
        msg.debug("> permissions_valid")
        try:
            with open(filepath) as f:
                filedata = f.read().splitlines()
                f.close()
        except Exception as e:
            msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
            msg.verbose()
            cluster_data['nodes'][node_name]['permissions_valid'] = None
            filedata = ''

        if filedata:
            cluster_data['nodes'][node_name]['permissions_valid'] = True
            for line in filedata:
                if "OK" not in line:
                    cluster_data['nodes'][node_name]['permissions_valid'] = False
                    cluster_data['permissions_valid_all_nodes'] = 0

        ##### sysinfo.txt
        filename = "sysinfo.txt"
        msg.debug("File", filename)
        filepath = node_data_source + "/" + filename
        try:
            with open(filepath) as f:
                filedata = f.read().splitlines()
                f.close()
        except Exception as e:
            msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
            msg.verbose()
            filedata = ''

        tmp_dist_list = []
        if filedata:
            msg.debug("> pkg versions and summary info")
            for line in filedata:
                line = line.lstrip()
                if line.startswith("CRM Version: "):
                    cluster_data['nodes'][node_name]['crm'] = line.split()[2]

                if line.startswith("corosync "):
                    cluster_data['nodes'][node_name]['corosync'] = line.split()[1]
                    tmp_dist_list = line.split()
                    del tmp_dist_list[-1]
                    del tmp_dist_list[0:3]
                elif re.search(r"^corosync-[0-9]", line):
                    tmp_ver1 = line.split('-', 1)[1]
                    tmp_ver2 = tmp_ver1.split('.')
                    del tmp_ver2[-1]
                    tmp_ver1 = '.'.join(tmp_ver2)
                    cluster_data['nodes'][node_name]['corosync'] = tmp_ver1

                if line.startswith("pacemaker "):
                    cluster_data['nodes'][node_name]['pacemaker'] = line.split()[1]
                elif re.search(r"^pacemaker-[0-9]", line):
                    tmp_ver1 = line.split('-', 1)[1]
                    tmp_ver2 = tmp_ver1.split('.')
                    del tmp_ver2[-1]
                    tmp_ver1 = '.'.join(tmp_ver2)
                    cluster_data['nodes'][node_name]['pacemaker'] = tmp_ver1

                if line.startswith("resource-agents "):
                    cluster_data['nodes'][node_name]['resource-agents'] = line.split()[1]
                elif re.search(r"^resource-agents-[0-9]", line):
                    tmp_ver1 = line.split('-', 2)[2]
                    tmp_ver2 = tmp_ver1.split('.')
                    del tmp_ver2[-1]
                    tmp_ver1 = '.'.join(tmp_ver2)
                    cluster_data['nodes'][node_name]['resource-agents'] = tmp_ver1

                if line.startswith("sbd "):
                    cluster_data['nodes'][node_name]['sbd'] = line.split()[1]
                elif re.search(r"^sbd-[0-9]", line):
                    tmp_ver1 = line.split('-', 1)[1]
                    tmp_ver2 = tmp_ver1.split('.')
                    del tmp_ver2[-1]
                    tmp_ver1 = '.'.join(tmp_ver2)
                    cluster_data['nodes'][node_name]['sbd'] = tmp_ver1

                if line.startswith("Platform: "):
                    cluster_data['nodes'][node_name]['platform'] = line.split()[-1]
                if line.startswith("Kernel release: "):
                    cluster_data['nodes'][node_name]['kernel'] = line.split()[-1]
                if line.startswith("Architecture: "):
                    cluster_data['nodes'][node_name]['arch'] = line.split()[-1]
                if line.startswith("Distribution: "):
                    dist = line.split(' ', 1)[1]
                    if "SUSE Linux Enterprise" in dist:
                        last_word = dist.split()[-1]
                        if "SP" in last_word:
                            cluster_data['nodes'][node_name]['os_version_major'] = dist.split()[-2]
                            cluster_data['nodes'][node_name]['os_version_minor'] = last_word.replace("SP", '')
                            cluster_data['nodes'][node_name]['distribution'] = dist
                        else:
                            cluster_data['nodes'][node_name]['os_version_major'] = dist.split()[-1]
                            cluster_data['nodes'][node_name]['os_version_minor'] = "0"
                            cluster_data['nodes'][node_name]['distribution'] = dist
                    else:
                        if tmp_dist_list:
                            cluster_data['nodes'][node_name]['distribution'] = " ".join(tmp_dist_list)
                            cluster_data['nodes'][node_name]['os_version_major'] = tmp_dist_list[-1]
                            cluster_data['nodes'][node_name]['os_version_minor'] = ''
                        else:
                            cluster_data['nodes'][node_name]['distribution'] = ''
                            cluster_data['nodes'][node_name]['os_version_major'] = ''
                            cluster_data['nodes'][node_name]['os_version_minor'] = ''

        ##### members.txt
        filename = "members.txt"
        msg.debug("File", filename)
        filepath = node_data_source + "/" + filename
        try:
            with open(filepath) as f:
                filedata = f.read().splitlines()
                f.close()
        except Exception as e:
            msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
            msg.verbose()
            filedata = ''

        if filedata:
            node_list = []
            for line in filedata:
                node_list = line.split()
            for member_node in node_list:
                if member_node not in cluster_data['nodes']:
                    msg.debug("> Added node - {}".format(member_node))
                    cluster_data['nodes'][member_node] = {}

        ##### crm_mon.txt
        filename = "crm_mon.txt"
        msg.debug("File", filename)
        filepath = node_data_source + "/" + filename
        try:
            with open(filepath) as f:
                filedata = f.read().splitlines()
                f.close()
        except Exception as e:
            msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
            msg.verbose()
            filedata = ''

        if filedata:
            node_list = []
            for line in filedata:
                line = line.strip()
                if line.startswith('* '):
                    line = line[2:]
                if "partition with quorum" in line:
                    msg.debug("> found quorum status")
                    cluster_data['has_quorum'] = True
                if "Current DC" in line:
                    dc_node_name = line.split()[2]
                    msg.debug("> found DC node {}".format(dc_node_name))
                    if dc_node_name not in cluster_data['nodes']:
                        cluster_data['nodes'][dc_node_name] = {}
                    cluster_data['nodes'][dc_node_name]['is_dc'] = True
                if " nodes configured" in line:
                    msg.debug("> cnt_nodes_configured")
                    value = line.split()[0]
                    if value.isdigit():
                        cluster_data['cnt_nodes_configured'] = int(value)
                if " resource instances configured" in line:
                    msg.debug("> cnt_resources_configured")
                    value = line.split()[0]
                    if value.isdigit():
                        cluster_data['cnt_resources_configured'] = int(value)
                if " resources configured" in line:
                    msg.debug("> cnt_resources_configured")
                    value = line.split()[0]
                    if value.isdigit():
                        cluster_data['cnt_resources_configured'] = int(value)
                if "Online: [" in line:
                    msg.debug("> nodes_online list")
                    entry = re.findall(r"\[(.*?)\]", line)
                    cluster_data['nodes_online'] = entry[0].strip().split()
                if "OFFLINE: [" in line:
                    msg.debug("> nodes_offline list")
                    entry = re.findall(r"\[(.*?)\]", line)
                    cluster_data['nodes_offline'] = entry[0].strip().split()
                if "maintenance" in line:
                    msg.debug("> nodes_maintenance list")
                    entry = re.findall(r"Node (.*?): maintenance", line)
                    if entry:
                        if entry[0] not in cluster_data['nodes_maintenance']:
                            cluster_data['nodes_maintenance'].append(entry[0])
                if "stonith:" in line:
                    if "stonith:external/sbd" in line:
                        cluster_data['stonith']['sbd']['found'] = True
                        msg.debug("> stonith:external/sbd found")
                    else:
                        entry = re.findall(r"\(stonith:(.*)\):", line)
                        if entry:
                            _type = entry[0]
                            if _type not in cluster_data['stonith']:
                                cluster_data['stonith'][_type] = {}
                                cluster_data['stonith'][_type]['found'] = True
                        msg.debug("> stonith:{} found".format(_type))
                                            

    if cluster_data['stonith']['sbd']['found']:
        for node_data_source in subfolders:
            msg.verbose("Processing SBD info", node_data_source)
            node_name = os.path.basename(node_data_source)

            ##### sbd.txt
            filename = "sbd.txt"
            msg.debug("File", filename)
            filepath = node_data_source + "/" + filename
            try:
                with open(filepath) as f:
                    filedata = f.read().splitlines()
                    f.close()
            except Exception as e:
                msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
                msg.verbose()
                filedata = ''

            if filedata:
                for line in filedata:
                    if line and line[0].isdigit():
                        entry = line.split()
                        server = entry[1]
                        status = entry[2]
                        if 'nodes' not in cluster_data['stonith']['sbd']:
                            cluster_data['stonith']['sbd']['nodes'] = {}
                        if server not in cluster_data['stonith']['sbd']['nodes']:
                            cluster_data['stonith']['sbd']['nodes'][server] = {'slots': []}
                        cluster_data['stonith']['sbd']['nodes'][server]['slots'].append(status)

            ##### sbd
            filename = "sbd"
            msg.debug("File", filename)
            filepath = node_data_source + "/" + filename
            try:
                with open(filepath) as f:
                    filedata = f.read().splitlines()
                    f.close()
            except Exception as e:
                msg.verbose(" Error: Cannot open {} file - {}".format(filename, str(e)))
                msg.verbose()
                filedata = ''

            if filedata:
                for line in filedata:
                    if line.startswith("#"):
                        continue
                    line = line.strip()
                    if line and "=" in line:
                        key, value = line.split('=', 1)
                        if 'SBD_DEVICE' in key:
                            device_list = value.strip().strip('"').strip("'").split(';')
                            cluster_data['stonith']['sbd']['config'][key.strip()] = device_list
                        else:
                            cluster_data['stonith']['sbd']['config'][key.strip()] = value.strip().strip('"').strip("'")
                                
        msg.debug("Calculating SBD status")
        cluster_data['stonith']['sbd']['all_clear'] = True
        for node_name in cluster_data['stonith']['sbd']['nodes'].keys():
            cluster_data['stonith']['sbd']['nodes'][node_name]['is_clear'] = True
            for status in cluster_data['stonith']['sbd']['nodes'][node_name]['slots']:
                if 'clear' not in status:
                    cluster_data['stonith']['sbd']['nodes'][node_name]['is_clear'] = False
                    cluster_data['stonith']['sbd']['all_clear'] = False


    msg.debug("Calculating is_dc, nodes_maintenance, is_running, permissions_valid_all_nodes")
    for node_name in cluster_data['nodes'].keys():
        if 'is_dc' not in cluster_data['nodes'][node_name]:
            cluster_data['nodes'][node_name]['is_dc'] = False

        if node_name in cluster_data['nodes_maintenance']:
            cluster_data['nodes'][node_name]['is_maintenance'] = True
        else:
            cluster_data['nodes'][node_name]['is_maintenance'] = False

        if node_name in cluster_data['nodes_offline']:
            cluster_data['nodes'][node_name]['is_running'] = False
        else:
            cluster_data['nodes'][node_name]['is_running'] = True
    if cluster_data['cnt_nodes_configured'] != cluster_data['cnt_nodes_included']:
        cluster_data['permissions_valid_all_nodes'] = -1


    return cluster_data

def analyze_cluster(msg, data):
#    print()
#    pprint.pprint(data, indent=4)

    try:
        os.makedirs(data['source_data']['dirpath_reports'], exist_ok=True)
    except OSError as e:
        print(f"Error creating folder: {e}")
        sys.exit(13)

    report_file = data['source_data']['dirpath_reports'] + "/report_data.json"
    try:
        with open(report_file, "w") as f:
            json.dump(data, f, indent = 4)
    except Exception as e:
        msg.min("Error: Cannot write {} file - {}".format(report_file, str(e)))
        msg.min()
        sys.exit(13)
    msg.min("Cluster Report Data File", report_file)


##############################################################################
# Main
##############################################################################

def main(argv):
    '''main entry point'''
    global SVER, progress_bar_active, config_file
    global width, description_width
    VALID_MIME_TYPES = [ 'application/x-xz', 'application/x-bzip', 'application/x-bzip2','application/x-gzip', 'application/x-tar' ]

    report_data = { 'tool_name': __file__, 'tool_version': SVER }
    this_file_data = {}
    this_cluster_data = {}
    remove_archive = False
    remove_extracted_directory = True
    pattern_library = False
    given_type = ''
    given_report_output_path = {}
    given_extract_path = {}

    if( os.path.exists(config_file) ):
        config.read(config_file)
        width = int(config_entry(config.get("Common", "display_width")))
        description_width = int(config_entry(config.get("Common", "description_width")))
        tool_library_path = config_entry(config.get("Common", "tool_library_path"), '/')
        extract_path = config_entry(config.get("Common", "extract_path"), '/')
        report_output_path = config_entry(config.get("Common", "report_output_path"), '/')
        msg.set_width(description_width)
        config_logging = msg.validate_level(config_entry(config.get("Common", "log_level")))
        if( config_logging >= msg.LOG_QUIET ):
            msg.set_level(config_logging)
        else:
            msg.verbose("Warning: Invalid log level in config file, using instance default")
    else:
        title()
        print("Error: File not found - " + config_file + "\n")
        sys.exit(1)

    os.environ['PYTHONPATH'] = os.path.abspath(tool_library_path + 'python')

    try:
        (optlist, args) = getopt.gnu_getopt(argv[1:], "hbdkno:pl:qrvx:", ["help", "batch", "debug", "keep", "normal", "output=", "summary", "log_level=", "quiet", "remove", "verbose", "dirpath_extract_here="])
    except getopt.GetoptError as exc:
        title()
        print("Error:", exc, file=sys.stderr)
        print()
        usage()
        sys.exit(2)
    for opt, arg in optlist:
        if opt in {"-h", "--help"}:
            title()
            usage()
            sys.exit(0)
        elif opt in {"-b", "--batch"}:
            progress_bar_active = False
        elif opt in {"-d", "--debug"}:
            msg.set_level(msg.LOG_DEBUG)
            remove_extracted_directory = False
        elif opt in {"-k", "--keep"}:
            remove_extracted_directory = False
        elif opt in {"-n", "--normal"}:
            msg.set_level(msg.LOG_NORMAL)
        elif opt in {"-o", "--output"}:
            given_report_output_path = arg
        elif opt in {"-r", "--remove"}:
            remove_archive = True
        elif opt in {"-q", "--quiet"}:
            msg.set_level(msg.LOG_QUIET)
        elif opt in {"-v", "--verbose"}:
            msg.set_level(msg.LOG_VERBOSE)
        elif opt in {"-x", "--dirpath_extract_here"}:
            given_extract_path = arg
        elif opt in {"-l", "--log_level"}:
            user_logging = msg.validate_level(arg)
            if( user_logging >= msg.LOG_QUIET ):
                msg.set_level(user_logging)
            else:
                print("Warning: Invalid log level, using instance default")

    if( msg.get_level() > msg.LOG_QUIET ):
        title()

    if pattern_library:
        show_pattern_library(msg, sca_patterns_path)
        sys.exit(0)

    preconfigured_extraction_path = check_extraction_path_given(msg, config_file, given_extract_path, extract_path)
    preconfigured_report_path = check_report_path_given(msg, config_file, given_report_output_path, report_output_path)

    total_args_given = len(args)
    supportconfig_dir = ''
    count = 0

    if total_args_given > 0:
        for given_source in args:
            msg.normal("Checking", given_source)
            this_file_data = evaluate_given_path(msg, given_source)
            this_file_data['extract_here_for_reports'] = False
            this_file_data['remove_tarball'] = False
            this_file_data['remove_directory'] = False
            
            if this_file_data['exists']:
                count += 1
                if total_args_given > 1:
                    msg.min("Processing [{}/{}]".format(count, total_args_given), this_file_data['path'])
                else:
                    msg.min("Processing", this_file_data['path'])

                if this_file_data['type'] == 'dir':
                    this_file_data['remove_directory'] = remove_archive
                    if valid_supportconfig_dir(msg, this_file_data['path']):
                        this_file_data['valid'] = True
                        this_file_data['dirpath_data_source'] = this_file_data['path']
                        if preconfigured_report_path:
                            this_file_data['dirpath_reports'] = preconfigured_report_path['path']
                        else:
                            if this_file_data['head_write']:    
                                this_file_data['dirpath_reports'] = this_file_data['path'] + "_reports"
                            else:
                                msg.min(" Error", "Write permisson denied, cannot create report file in {0}".format(this_file_data['head']))
                                msg.min(" * Suggestion", "Use -o, --output to specify an alternate report file directory")
                                separate_entry(msg, total_args_given)
                                continue
                        this_file_data['dirpath_data_source'] = this_file_data['path']
                        report_data['source_data'] = this_file_data
                        this_cluster_data = get_cluster_data(msg, this_file_data)
                        report_data['cluster'] = this_cluster_data
                        analyze_cluster(msg, report_data)
                    else:
                        this_file_data['valid'] = False
                        report_data['source_data'] = this_file_data
                    separate_entry(msg, total_args_given)

                elif this_file_data['type'] == 'file':
                    if not this_file_data['tail_mime_type'] in VALID_MIME_TYPES:
                        msg.min(" Skipping file", "Not a supportconfig compressed file - {0}".format(this_file_data['path']))
                        separate_entry(msg, total_args_given)
                        continue
                    this_file_data['remove_tarball'] = remove_archive
                    this_file_data['remove_directory'] = remove_extracted_directory

                    if preconfigured_extraction_path:
                        this_file_data['dirpath_extract_here'] = preconfigured_extraction_path['dirpath_extract_here']
                        this_file_data['extract_here_for_reports'] = preconfigured_extraction_path['extract_here_for_reports']
                    else:
                        if this_file_data['head_write']:
                            this_file_data['dirpath_extract_here'] = this_file_data['head']
                        else:
                            msg.min(" Error", "Write permisson denied, cannot extract file to {0}".format(this_file_data['head']))
                            msg.min(" * Suggestion", "Use -x, --dirpath_extract_here to specify an alternate extraction directory")
                            separate_entry(msg, total_args_given)
                            continue
                    supportconfig_dir = extract_supportconfig(msg, this_file_data)
                    msg.debug("supportconfig_dir", supportconfig_dir)
                    if valid_supportconfig_dir(msg, supportconfig_dir):
                        this_file_data['valid'] = True
                        this_file_data['dirpath_embedded'] = supportconfig_dir
                        this_file_data['dirpath_data_source'] = this_file_data['dirpath_embedded']

                        if preconfigured_report_path:
                            this_file_data['dirpath_reports'] = preconfigured_report_path['path']
                        else:
                            if this_file_data['extract_here_for_reports']:
                                this_file_data['dirpath_reports'] = this_file_data['dirpath_extract_here']
                            else:
                                if this_file_data['head_write']:
                                    this_file_data['dirpath_reports'] = this_file_data['path'] + "_reports"
                                else:
                                    msg.min(" Error", "Write permisson denied, cannot create report file in {0}".format(this_file_data['head']))
                                    msg.min(" * Suggestion", "Use -o, --output to specify an alternate report file directory")
                                    separate_entry(msg, total_args_given)
                                    continue
                        report_data['source_data'] = this_file_data
                        this_cluster_data = get_cluster_data(msg, this_file_data)
                        report_data['cluster'] = this_cluster_data
                        analyze_cluster(msg, report_data)
                    else:
                        this_file_data['valid'] = False
                        report_data['source_data'] = this_file_data
                    separate_entry(msg, total_args_given)

                elif not this_file_data['tail_read']:
                    msg.min(" Error", "Read permisson denied - {0}".format(this_file_data['path']))
                    msg.min(" * Suggestion", "Use chmod or sudo to elevate read permissions")
                    separate_entry(msg, total_args_given)
                    continue
                else:
                    msg.min(" Error", "Unknown file type - {0}".format(this_file_data['path']))
                    separate_entry(msg, total_args_given)
                    continue
            clean_up(msg, report_data)
        msg.normal()
    else:
        usage()
        sys.exit(0)

    msg.min()

# Entry point
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    config = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
    msg = DisplayMessages()
    main(sys.argv)

