#!/usr/bin/python3
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
#-*- coding: utf-8 -*-

SVER = '0.0.6-dev'

##############################################################################
# pcratool - Pacemaker Cluster Report Analysis Tool
# Copyright (c) 2025 SUSE LLC
#
# Description:  Analyzes HB report archives for known issues
# Modified:     2025 Oct 01
#
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 3 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  Authors/Contributors:
#    Jason Record <jason.record@suse.com>
#    Raine Curtis <raine.curtis@suse.com>
#
##############################################################################

import os
import re
import sys
import signal
import getopt
import configparser
import pprint # for debugging only, remove before release

tool_name = os.path.basename(__file__)
mod_path = '/usr/lib/' + tool_name
sys.path.append(mod_path)

import pcranalysis as pca
import pcrcore
import pcrcluster

config_file = '/etc/' + tool_name + "/" + tool_name + ".conf"

def title(width):
    pcrcore.separator_line(width)
    print("#   Pacemaker Cluster Report Analysis Tool, v" + SVER)
    pcrcore.separator_line(width)
    print()

def usage():
    display = "  {:33} {}"
    print("Usage: {} [OPTIONS] [/path/to/hb_report]".format(tool_name))
    print()
    print("OPTIONS")
    print(display.format('-h, --help', "Displays this screen"))
    print(display.format('-b, --batch', "Batch mode that disables the progress bar"))
    print(display.format('-c, --disable_combine', "Disable combining and sorting log files"))
    print(display.format('-d, --debug', "Use log level 4"))
    print(display.format('-k, --keep', "Do not delete extracted directories"))
    print(display.format('-n, --normal', "Use log level 2, default log level: Minimal"))
    print(display.format('-o <path>, --output <path>', "Report file output directory"))
    print(display.format('-q, --quiet', "Use log level 0"))
    print(display.format('-r, --remove', "Remove archive files leaving only the Report file. Ignored in debug mode."))
    print(display.format('-s, --disable_search', "Disable searching for possible TIDs"))
    print(display.format('-t, --type', "Report file output type, options: json, html, all. Default: html"))
    print(display.format('-v, --verbose', "Use log level 3"))
    print(display.format('-x <path>, --dirpath_extract_here <path>', "Extract any HB report archives to this alternate extraction directory"))
#    print(display.format('-l <level>, --log_level <level>', "Set log level, default: Minimal"))
#    print(display.format('', "0 Quiet, 1 Minimal, 2 Normal, 3 Verbose, 4 Debug"))
    print()

def option_error(msg):
    print(msg)
    print()
    usage()
    sys.exit(1)

def signal_handler(sig, frame):
    print("\n\nAborting...\n")
    sys.exit(1)

##############################################################################
# Main
##############################################################################

def main(argv):
    '''main entry point'''
    global SVER, config_file, tool_name
    VALID_MIME_TYPES = [ 'application/x-xz', 'application/x-bzip', 'application/x-bzip2','application/x-gzip', 'application/x-tar' ]

    report_data = { 'tool_name': tool_name, 'tool_version': SVER }
    this_file_data = {}
    this_cluster_data = {}
    remove_archive = False
    remove_extracted_directory = True
    pattern_library = False
    combine_logs = True
    search_tids = False
    given_type = ''
    given_report_output_path = {}
    given_extract_path = {}
    extract_path = ''
    report_output_path = ''
    progress_bar_active = True
    width = 85
    description_width = 30

    if( os.path.exists(config_file) ):
        config.read(config_file)
        width = int(pcrcore.config_entry(config.get("Common", "display_width")))
        description_width = int(pcrcore.config_entry(config.get("Common", "description_width")))
        extract_path = pcrcore.config_entry(config.get("Common", "extract_path"), '/')
        report_output_path = pcrcore.config_entry(config.get("Common", "report_output_path"), '/')
        msg.set_width(description_width)
        config_logging = msg.validate_level(pcrcore.config_entry(config.get("Common", "log_level")))
        if( config_logging >= msg.LOG_QUIET ):
            msg.set_level(config_logging)
        else:
            msg.verbose("Warning: Invalid log level in config file, using instance default")
    else:
        title(width)
        print("Error: File not found - " + config_file + "\n")
        sys.exit(1)

    try:
        (optlist, args) = getopt.gnu_getopt(argv[1:], "hbcdkno:pl:qrsvx:", ["help", "batch", "disable_combine", "debug", "keep", "normal", "output=", "summary", "log_level=", "quiet", "remove", "disable_search", "verbose", "dirpath_extract_here="])
    except getopt.GetoptError as exc:
        title(width)
        print("Error:", exc, file=sys.stderr)
        print()
        usage()
        sys.exit(2)
    for opt, arg in optlist:
        if opt in {"-h", "--help"}:
            title(width)
            usage()
            sys.exit(0)
        elif opt in {"-b", "--batch"}:
            progress_bar_active = False
        elif opt in {"-c", "--disable_combine"}:
            combine_logs = False
        elif opt in {"-d", "--debug"}:
            msg.set_level(msg.LOG_DEBUG)
            remove_extracted_directory = False
        elif opt in {"-k", "--keep"}:
            remove_extracted_directory = False
        elif opt in {"-n", "--normal"}:
            msg.set_level(msg.LOG_NORMAL)
        elif opt in {"-o", "--output"}:
            given_report_output_path = arg
        elif opt in {"-r", "--remove"}:
            remove_archive = True
        elif opt in {"-s", "--disable_search"}:
            search_tids = True
        elif opt in {"-q", "--quiet"}:
            msg.set_level(msg.LOG_QUIET)
        elif opt in {"-v", "--verbose"}:
            msg.set_level(msg.LOG_VERBOSE)
        elif opt in {"-x", "--dirpath_extract_here"}:
            given_extract_path = arg
        elif opt in {"-l", "--log_level"}:
            user_logging = msg.validate_level(arg)
            if( user_logging >= msg.LOG_QUIET ):
                msg.set_level(user_logging)
            else:
                print("Warning: Invalid log level, using instance default")

    if( msg.get_level() > msg.LOG_QUIET ):
        title(width)

    preconfigured_extraction_path = pcrcore.check_extraction_path_given(msg, config_file, given_extract_path, extract_path)
    preconfigured_report_path = pcrcore.check_report_path_given(msg, config_file, given_report_output_path, report_output_path)

    total_args_given = len(args)
    archive_dir = ''
    count = 0

    if total_args_given > 0:
        for given_source in args:
            msg.normal("Checking", given_source)
            this_file_data = pcrcore.evaluate_given_path(msg, given_source)
            this_file_data['extract_here_for_reports'] = False
            this_file_data['remove_tarball'] = False
            this_file_data['remove_directory'] = False
            this_file_data['combine_logs'] = combine_logs
            this_file_data['search_tids'] = search_tids
            
            if this_file_data['exists']:
                count += 1
                if total_args_given > 1:
                    msg.min("Processing [{}/{}]".format(count, total_args_given), this_file_data['path'])
                else:
                    msg.min("Processing", this_file_data['path'])

                if this_file_data['type'] == 'file':
                    if not this_file_data['tail_mime_type'] in VALID_MIME_TYPES:
                        msg.min(" Missing file", "Not an HB report compressed file - {0}".format(this_file_data['path']))
                        pcrcore.separate_entry(msg, width, total_args_given)
                        continue
                    this_file_data['remove_tarball'] = remove_archive
                    this_file_data['remove_directory'] = remove_extracted_directory

                    if preconfigured_extraction_path:
                        this_file_data['dirpath_extract_here'] = preconfigured_extraction_path['dirpath_extract_here']
                        this_file_data['extract_here_for_reports'] = preconfigured_extraction_path['extract_here_for_reports']
                    else:
                        if this_file_data['head_write']:
                            this_file_data['dirpath_extract_here'] = this_file_data['head']
                        else:
                            msg.min(" ERROR:", "Write permisson denied, cannot extract file to {0}".format(this_file_data['head']))
                            msg.min(" * Suggestion", "Use -x, --dirpath_extract_here to specify an alternate extraction directory")
                            pcrcore.separate_entry(msg, width, total_args_given)
                            continue
                    archive_dir = pcrcore.extract_archive(msg, this_file_data)
                    msg.debug("archive_dir", archive_dir)
                    if pcrcore.valid_archive_dir(msg, archive_dir):
                        this_file_data['valid'] = True
                        this_file_data['dirpath_embedded'] = archive_dir
                        this_file_data['dirpath_data_source'] = this_file_data['dirpath_embedded']

                        if preconfigured_report_path:
                            this_file_data['dirpath_reports'] = preconfigured_report_path['path']
                        else:
                            if this_file_data['extract_here_for_reports']:
                                this_file_data['dirpath_reports'] = this_file_data['dirpath_extract_here']
                            else:
                                if this_file_data['head_write']:
                                    this_file_data['dirpath_reports'] = this_file_data['path'] + "_reports"
                                else:
                                    msg.min(" ERROR:", "Write permisson denied, cannot create report file in {0}".format(this_file_data['head']))
                                    msg.min(" * Suggestion", "Use -o, --output to specify an alternate report file directory")
                                    pcrcore.separate_entry(msg, width, total_args_given)
                                    continue
                        report_data['source_data'] = this_file_data
                    else:
                        this_file_data['valid'] = False
                        report_data['source_data'] = this_file_data

                elif this_file_data['type'] == 'dir':
                    this_file_data['remove_directory'] = remove_archive
                    if pcrcore.valid_archive_dir(msg, this_file_data['path']):
                        this_file_data['valid'] = True
                        this_file_data['dirpath_data_source'] = this_file_data['path']
                        if preconfigured_report_path:
                            this_file_data['dirpath_reports'] = preconfigured_report_path['path']
                        else:
                            if this_file_data['head_write']:    
                                this_file_data['dirpath_reports'] = this_file_data['path'] + "_reports"
                            else:
                                msg.min(" ", "Write permisson denied, cannot create report file in {0}".format(this_file_data['head']))
                                msg.min(" * Suggestion", "Use -o, --output to specify an alternate report file directory")
                                separate_entry(msg, width, total_args_given)
                                continue
                        this_file_data['dirpath_data_source'] = this_file_data['path']
                        report_data['source_data'] = this_file_data
                    else:
                        this_file_data['valid'] = False
                        report_data['source_data'] = this_file_data

                elif not this_file_data['tail_read']:
                    msg.min(" ERROR:", "Read permisson denied - {0}".format(this_file_data['path']))
                    msg.min(" * Suggestion", "Use chmod or sudo to elevate read permissions")
                    pcrcore.separate_entry(msg, width, total_args_given)
                    continue
                else:
                    msg.min(" ERROR:", "Unknown file type - {0}".format(this_file_data['path']))
                    pcrcore.separate_entry(msg, width, total_args_given)
                    continue

                if report_data['source_data']['valid']:
                    pcrcore.create_reports_path(msg, report_data['source_data'])
                    this_cluster_data = pcrcluster.get_cluster_data(msg, report_data['source_data'])
                    report_data['cluster'] = this_cluster_data
                    pcrcore.save_report_data(msg, report_data)
                    if report_data['source_data']['combine_logs'] is True:
                        pcrcluster.synchronize_log_files(msg, report_data)
                    else:
                        msg.min("Log Files", "Combining and Sorting, Disabled")
                    cluster = pca.PacemakerClusterAnalysis(msg, report_data)
                    cluster.analyze()
                    cluster.save_results()
                    pcrcore.clean_up(msg, report_data)
                pcrcore.separate_entry(msg, width, total_args_given)

            else:
                msg.min('Error: File or directory not found - {}'.format(given_source))
        msg.normal()
    else:
        usage()
        sys.exit(0)

    msg.min()

# Entry point
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    config = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
    msg = pcrcore.DisplayMessages()
    main(sys.argv)

